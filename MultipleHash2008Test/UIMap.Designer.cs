// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MultipleHash2008Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddPath - Use 'AddPathParams' to pass parameters into this method.
        /// </summary>
        public void AddPath()
        {
            #region Variable Declarations
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow12.UIDataFlowDiagramClient;
            WinMenuItem uIAddPathMenuItem = this.UIComponentMenuWindow.UIComponentMenuMenu.UIAddPathMenuItem;
            WinComboBox uITOComboBox = this.UIDataFlowWindow.UIComboBox2Window.UITOComboBox;
            WinButton uIOKButton = this.UIDataFlowWindow.UIOKWindow.UIOKButton;
            #endregion

            // Right-Click 'Data Flow Diagram' client
            Mouse.Click(uIDataFlowDiagramClient, MouseButtons.Right, ModifierKeys.None, new Point(178, 138));

            // Click 'Add Path' menu item
            Mouse.Click(uIAddPathMenuItem, new Point(57, 4));

            // Select 'Multiple Hash' in 'To:' combo box
            uITOComboBox.SelectedItem = this.AddPathParams.UITOComboBoxSelectedItem;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(19, 12));
        }
        
        /// <summary>
        /// AssertAddOutputNotAllowed - Use 'AssertAddOutputNotAllowedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAddOutputNotAllowed()
        {
            #region Variable Declarations
            WinText uIComponentMultipleHasText = this.UIMicrosoftVisualStudiWindow.UIComponentMultipleHasWindow.UIComponentMultipleHasText;
            #endregion

            // Verify that 'Component Multiple Hash does not allow adding outp...' label's property 'DisplayText' equals 'Component Multiple Hash does not allow adding outputs. (Microsoft.SqlServer.DTSPipelineWrap)'
            Assert.AreEqual(this.AssertAddOutputNotAllowedExpectedValues.UIComponentMultipleHasTextDisplayText, uIComponentMultipleHasText.DisplayText);
        }
        
        /// <summary>
        /// AssertAdvancedEditorInputColumnChecked - Use 'AssertAdvancedEditorInputColumnCheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorInputColumnChecked()
        {
            #region Variable Declarations
            WinCheckBox uIRow0column0CheckBox = this.UIAdvancedEditorforMulWindow.UIColumnsGridControlWindow.UIColumn0Column.UIRow0column0CheckBox;
            #endregion

            // Verify that 'row 0, column 0' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.AssertAdvancedEditorInputColumnCheckedExpectedValues.UIRow0column0CheckBoxChecked, uIRow0column0CheckBox.Checked);
        }
        
        /// <summary>
        /// AssertAdvancedEditorInputColumnUnChecked - Use 'AssertAdvancedEditorInputColumnUnCheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorInputColumnUnChecked()
        {
            #region Variable Declarations
            WinCheckBox uIRow0column0CheckBox = this.UIAdvancedEditorforMulWindow.UIColumnsGridControlWindow.UIColumn0Column.UIRow0column0CheckBox;
            #endregion

            // Verify that 'row 0, column 0' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.AssertAdvancedEditorInputColumnUnCheckedExpectedValues.UIRow0column0CheckBoxChecked, uIRow0column0CheckBox.Checked);
        }
        
        /// <summary>
        /// AssertAdvancedEditorInputReadWriteNotSupported - Use 'AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorInputReadWriteNotSupported()
        {
            #region Variable Declarations
            WinText uIErroratDataFlowTaskMText = this.UIAdvancedEditorforMulWindow.UIErroratDataFlowTaskMWindow.UIErroratDataFlowTaskMText;
            #endregion

            // Verify that 'Error at Data Flow Task [Multiple Hash [24]]: Syst...' label's property 'DisplayText' contains 'System.Exception: Read write not supported.'
            StringAssert.Contains(uIErroratDataFlowTaskMText.DisplayText, this.AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues.UIErroratDataFlowTaskMTextDisplayText);
        }
        
        /// <summary>
        /// AssertAdvancedEditorMultipleThreadAuto - Use 'AssertAdvancedEditorMultipleThreadAutoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorMultipleThreadAuto()
        {
            #region Variable Declarations
            WinRow uIMultipleThreadsRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIMultipleThreadsRow;
            #endregion

            // Verify that 'MultipleThreads' row's property 'Value' equals 'Auto'
            Assert.AreEqual(this.AssertAdvancedEditorMultipleThreadAutoExpectedValues.UIMultipleThreadsRowValue, uIMultipleThreadsRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorMultipleThreadNone - Use 'AssertAdvancedEditorMultipleThreadNoneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorMultipleThreadNone()
        {
            #region Variable Declarations
            WinRow uIMultipleThreadsRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIMultipleThreadsRow;
            #endregion

            // Verify that 'MultipleThreads' row's property 'Value' equals 'None'
            Assert.AreEqual(this.AssertAdvancedEditorMultipleThreadNoneExpectedValues.UIMultipleThreadsRowValue, uIMultipleThreadsRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorMultipleThreadOn - Use 'AssertAdvancedEditorMultipleThreadOnExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorMultipleThreadOn()
        {
            #region Variable Declarations
            WinRow uIMultipleThreadsRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIMultipleThreadsRow;
            #endregion

            // Verify that 'MultipleThreads' row's property 'Value' equals 'On'
            Assert.AreEqual(this.AssertAdvancedEditorMultipleThreadOnExpectedValues.UIMultipleThreadsRowValue, uIMultipleThreadsRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorOutputColumnDescription - Use 'AssertAdvancedEditorOutputColumnDescriptionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorOutputColumnDescription()
        {
            #region Variable Declarations
            WinRow uIDescriptionRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDescriptionRow;
            #endregion

            // Verify that 'Description' row's property 'Value' equals 'This is a description'
            Assert.AreEqual(this.AssertAdvancedEditorOutputColumnDescriptionExpectedValues.UIDescriptionRowValue, uIDescriptionRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorOutputColumnHashType - Use 'AssertAdvancedEditorOutputColumnHashTypeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorOutputColumnHashType()
        {
            #region Variable Declarations
            WinEdit uIHashTypeEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIHashTypeEdit;
            #endregion

            // Verify that 'HashType' text box's property 'Text' equals 'SHA1'
            Assert.AreEqual(this.AssertAdvancedEditorOutputColumnHashTypeExpectedValues.UIHashTypeEditText, uIHashTypeEdit.Text);
        }
        
        /// <summary>
        /// AssertAdvancedEditorOutputColumnLineageIDOK - Use 'AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorOutputColumnLineageIDOK()
        {
            #region Variable Declarations
            WinRow uIInputColumnLineageIDRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIInputColumnLineageIDRow;
            #endregion

            // Verify that 'InputColumnLineageIDs' row's property 'Value' equals '#23'
            Assert.AreEqual(this.AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues.UIInputColumnLineageIDRowValue, uIInputColumnLineageIDRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorOutputColumnName - Use 'AssertAdvancedEditorOutputColumnNameExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorOutputColumnName()
        {
            #region Variable Declarations
            WinRow uINameRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UINameRow;
            #endregion

            // Verify that 'Name' row's property 'Value' equals 'NewColumn'
            Assert.AreEqual(this.AssertAdvancedEditorOutputColumnNameExpectedValues.UINameRowValue, uINameRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorOutputColumnSHA1Length - Use 'AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorOutputColumnSHA1Length()
        {
            #region Variable Declarations
            WinRow uILengthRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UILengthRow;
            #endregion

            // Verify that 'Length' row's property 'Value' equals '20'
            Assert.AreEqual(this.AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues.UILengthRowValue, uILengthRow.Value);
        }
        
        /// <summary>
        /// AssertAdvancedEditorPropertyValueNotSupported - Use 'AssertAdvancedEditorPropertyValueNotSupportedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdvancedEditorPropertyValueNotSupported()
        {
            #region Variable Declarations
            WinText uIPropertyvalueisnotvaText = this.UIPropertiesWindowWindow.UIPropertyvalueisnotvaWindow.UIPropertyvalueisnotvaText;
            #endregion

            // Verify that 'Property value is not valid.' label's property 'DisplayText' equals 'Property value is not valid.'
            Assert.AreEqual(this.AssertAdvancedEditorPropertyValueNotSupportedExpectedValues.UIPropertyvalueisnotvaTextDisplayText, uIPropertyvalueisnotvaText.DisplayText);
        }
        
        /// <summary>
        /// AssertMultipleThreadAuto - Use 'AssertMultipleThreadAutoExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMultipleThreadAuto()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIMultipleHashFormWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Auto'
            Assert.AreEqual(this.AssertMultipleThreadAutoExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertMultipleThreadNone - Use 'AssertMultipleThreadNoneExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMultipleThreadNone()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIMultipleHashFormWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'None'
            Assert.AreEqual(this.AssertMultipleThreadNoneExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertMultipleThreadOn - Use 'AssertMultipleThreadOnExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMultipleThreadOn()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIMultipleHashFormWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'On'
            Assert.AreEqual(this.AssertMultipleThreadOnExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertOutputColumnsAreZero - Use 'AssertOutputColumnsAreZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOutputColumnsAreZero()
        {
            #region Variable Declarations
            WinRow uICountRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UICountRow;
            #endregion

            // Verify that 'Count' row's property 'Value' equals '0'
            Assert.AreEqual(this.AssertOutputColumnsAreZeroExpectedValues.UICountRowValue, uICountRow.Value);
        }
        
        /// <summary>
        /// AssertSafeNullHandlingClearAssert - Use 'AssertSafeNullHandlingClearAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSafeNullHandlingClearAssert()
        {
            #region Variable Declarations
            WinCheckBox uISafeNullHandlingCheckBox = this.UIMultipleHashFormWindow.UISafeNullHandlingWindow.UISafeNullHandlingCheckBox;
            #endregion

            // Verify that 'Safe Null Handling' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.AssertSafeNullHandlingClearAssertExpectedValues.UISafeNullHandlingCheckBoxChecked, uISafeNullHandlingCheckBox.Checked);
        }
        
        /// <summary>
        /// AssertSafeNullHandlingSelectAssert - Use 'AssertSafeNullHandlingSelectAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSafeNullHandlingSelectAssert()
        {
            #region Variable Declarations
            WinCheckBox uISafeNullHandlingCheckBox = this.UIMultipleHashFormWindow.UISafeNullHandlingWindow.UISafeNullHandlingCheckBox;
            #endregion

            // Verify that 'Safe Null Handling' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.AssertSafeNullHandlingSelectAssertExpectedValues.UISafeNullHandlingCheckBoxChecked, uISafeNullHandlingCheckBox.Checked);
        }
        
        /// <summary>
        /// ClickOkOnMultipleHash
        /// </summary>
        public void ClickOkOnMultipleHash()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMultipleHashFormWindow.UIOKWindow.UIOKButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 16));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// CloseAndExit
        /// </summary>
        public void CloseAndExit()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UIStartPageMicrosoftViWindow.UIMenuBarMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIMicrosoftVisualStudiWindow1.UINOWindow.UINOButton;
            WinMenuItem uIExitMenuItem = this.UIStartPageMicrosoftViWindow.UIMenuBarMenuBar.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(48, 7));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(32, 6));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(101, 12));
        }
        
        /// <summary>
        /// DeletePathFromScriptToMultipleHash - Use 'DeletePathFromScriptToMultipleHashParams' to pass parameters into this method.
        /// </summary>
        public void DeletePathFromScriptToMultipleHash()
        {
            #region Variable Declarations
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow13.UIDataFlowDiagramClient;
            WinControl uIDataFlowDiagramDiagram = this.UIStartPageMicrosoftViWindow.UIPipelineTaskViewWindow.UIToeditaDataFlowtasksClient.UIDataFlowDiagramDiagram;
            #endregion

            // Click 'Data Flow Diagram' client
            Mouse.Click(uIDataFlowDiagramClient, new Point(152, 179));

            // Type '{Delete}' in 'Data Flow Diagram' Diagram
            Keyboard.SendKeys(uIDataFlowDiagramDiagram, this.DeletePathFromScriptToMultipleHashParams.UIDataFlowDiagramDiagramSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// ErrorMessageAddOutputOK
        /// </summary>
        public void ErrorMessageAddOutputOK()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMicrosoftVisualStudiWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 15));
        }
        
        /// <summary>
        /// LoadVS2008AndAddMultipleHash - Use 'LoadVS2008AndAddMultipleHashParams' to pass parameters into this method.
        /// </summary>
        public void LoadVS2008AndAddMultipleHash()
        {
            #region Variable Declarations
            WinMenuItem uIProjectSolutionMenuItem = this.UIStartPageMicrosoftViWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem.UIProjectSolutionMenuItem;
            WinEdit uINameEdit = this.UIOpenProjectWindow.UIItemWindow.UISSIS2008TestMultipleListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenProjectWindow.UIItemWindow1.UISSIS2008TestMultipleListItem.UINameEdit;
            WinTreeItem uIEmptyUnitTestPackageTreeItem = this.UIStartPageMicrosoftViWindow.UISolutionExplorerWindow.UISolutionExplorerTree.UISSIS2008TestMultipleTreeItem.UISSISPackagesTreeItem.UIEmptyUnitTestPackageTreeItem;
            WinButton uIDataFlowButton = this.UIStartPageMicrosoftViWindow.UIToolBarWindow.UIToolBarToolBar.UIDataFlowButton;
            WinClient uISSIS2008TestMultipleClient = this.UIStartPageMicrosoftViWindow.UIItemWindow.UISSIS2008TestMultipleClient;
            WinListItem uIMultipleHashListItem = this.UIStartPageMicrosoftViWindow.UIToolboxTree.UIMultipleHashListItem;
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow1.UIDataFlowDiagramClient;
            #endregion

            // Launch '%ProgramFiles%\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe'
            ApplicationUnderTest devenvApplication = ApplicationUnderTest.Launch(this.LoadVS2008AndAddMultipleHashParams.ExePath, this.LoadVS2008AndAddMultipleHashParams.AlternateExePath);

            // Click 'File' -> 'Open' -> 'Project/Solution...' menu item
            Mouse.Click(uIProjectSolutionMenuItem, new Point(65, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(69, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(60, 7));

            // Double-Click 'SSIS2008TestMultipleHash' -> 'SSIS Packages' -> 'EmptyUnitTestPackage.dtsx' tree item
            Mouse.DoubleClick(uIEmptyUnitTestPackageTreeItem, new Point(21, 7));

            // Click 'Data Flow' button
            Mouse.Click(uIDataFlowButton, new Point(50, 10));

            // Click 'SSIS2008TestMultipleHash - Microsoft Visual Studio...' client
            Mouse.Click(uISSIS2008TestMultipleClient, new Point(6, 39));

            // Move 'Multiple Hash' list item from (83, 7) to 'Data Flow Diagram' client (86, 212)
            uIDataFlowDiagramClient.EnsureClickable(new Point(86, 212));
            Mouse.StartDragging(uIMultipleHashListItem, new Point(83, 7));
            Mouse.StopDragging(uIDataFlowDiagramClient, new Point(86, 212));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorCancel
        /// </summary>
        public void MultipleHashAdvancedEditorCancel()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIAdvancedEditorforMulWindow.UICancelWindow.UICancelButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(57, 16));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputColumns
        /// </summary>
        public void MultipleHashAdvancedEditorInputColumns()
        {
            #region Variable Declarations
            WinTabPage uIInputColumnsTabPage = this.UIAdvancedEditorforMulWindow.UITheadvancededitorproTabList.UIInputColumnsTabPage;
            #endregion

            // Click 'Input Columns' tab
            Mouse.Click(uIInputColumnsTabPage, new Point(53, 14));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputColumnsSelectColumn
        /// </summary>
        public void MultipleHashAdvancedEditorInputColumnsSelectColumn()
        {
            #region Variable Declarations
            WinTable uIMainGridControlTable = this.UIAdvancedEditorforMulWindow.UIGridControlWindow.UIMainGridControlTable;
            #endregion

            // Click 'Main Grid Control' table
            Mouse.Click(uIMainGridControlTable, new Point(34, 7));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputColumnsSelectColumn_1 - Use 'MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputColumnsSelectColumn_1()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIAdvancedEditorforMulWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Select 'Column' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params.UIItemComboBoxSelectedItem;
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputColumnsSetReadWrite - Use 'MultipleHashAdvancedEditorInputColumnsSetReadWriteParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputColumnsSetReadWrite()
        {
            #region Variable Declarations
            WinList uIGridControlList = this.UIAdvancedEditorforMulWindow.UIGridControlWindow.UIColumn2Column.UIGridControlList;
            WinComboBox uIItemComboBox = this.UIAdvancedEditorforMulWindow.UIItemWindow.UIItemComboBox;
            #endregion

            // Click 'gridControl' list box
            Mouse.Click(uIGridControlList, new Point(34, 7));

            // Select 'READWRITE' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MultipleHashAdvancedEditorInputColumnsSetReadWriteParams.UIItemComboBoxSelectedItem;
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputColumnsUnselectColumn - Use 'MultipleHashAdvancedEditorInputColumnsUnselectColumnParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputColumnsUnselectColumn()
        {
            #region Variable Declarations
            WinTable uIMainGridControlTable = this.UIAdvancedEditorforMulWindow.UIGridControlWindow.UIMainGridControlTable;
            #endregion

            // Click 'Main Grid Control' table
            Mouse.Click(uIMainGridControlTable, new Point(708, 32));

            // Type '{Delete}' in 'Main Grid Control' table
            Keyboard.SendKeys(uIMainGridControlTable, this.MultipleHashAdvancedEditorInputColumnsUnselectColumnParams.UIMainGridControlTableSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputProperties
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputProperties()
        {
            #region Variable Declarations
            WinTabPage uIInputandOutputProperTabPage = this.UIAdvancedEditorforMulWindow.UITheadvancededitorproTabList.UIInputandOutputProperTabPage;
            #endregion

            // Click 'Input and Output Properties' tab
            Mouse.Click(uIInputandOutputProperTabPage, new Point(34, 15));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesAddColumn - Use 'MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesAddColumn()
        {
            #region Variable Declarations
            WinButton uIAddColumnButton = this.UIAdvancedEditorforMulWindow.UIAddColumnWindow.UIAddColumnButton;
            WinEdit uIItemEdit = this.UIAdvancedEditorforMulWindow.UIColumnWindow.UIItemEdit;
            WinRow uIMappedColumnIDRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIMappedColumnIDRow;
            #endregion

            // Click 'Add &Column' button
            Mouse.Click(uIAddColumnButton, new Point(66, 12));

            // Type 'NewColumn' in 'Unknown Name' text box
            uIItemEdit.Text = this.MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams.UIItemEditText;

            // Click 'MappedColumnID' row
            Mouse.Click(uIMappedColumnIDRow, new Point(269, 10));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesAddOutput
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesAddOutput()
        {
            #region Variable Declarations
            WinButton uIAddOutputButton = this.UIAdvancedEditorforMulWindow.UIAddOutputWindow.UIAddOutputButton;
            #endregion

            // Click '&Add Output' button
            Mouse.Click(uIAddOutputButton, new Point(116, 17));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesFixDataType - Use 'MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesFixDataType()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIPropertiesWindowWindow.UIOKWindow.UIOKButton;
            WinEdit uIDataTypeEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDataTypeEdit;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 12));

            // Type 'byte stream [DT_BYTES]' in 'DataType' text box
            uIDataTypeEdit.Text = this.MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams.UIDataTypeEditText;
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesHashedOutputOutputColumns
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesHashedOutputOutputColumns()
        {
            #region Variable Declarations
            WinTreeItem uIHashedOutputTreeItem = this.UIAdvancedEditorforMulWindow.UIInputsandoutputsTree.UIHashedOutputTreeItem;
            WinTreeItem uIOutputColumnsTreeItem = this.UIAdvancedEditorforMulWindow.UIInputsandoutputsTree.UIHashedOutputTreeItem.UIOutputColumnsTreeItem;
            #endregion

            // Click 'HashedOutput' tree item
            Mouse.Click(uIHashedOutputTreeItem, new Point(11, 6));

            // Click 'HashedOutput' -> 'Output Columns' tree item
            Mouse.Click(uIOutputColumnsTreeItem, new Point(24, 6));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesSetDataType - Use 'MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesSetDataType()
        {
            #region Variable Declarations
            WinRow uIDataTypeRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDataTypeRow;
            WinEdit uIDataTypeEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDataTypeEdit;
            WinRow uILengthRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UILengthRow;
            #endregion

            // Click 'DataType' row
            Mouse.Click(uIDataTypeRow, new Point(215, 9));

            // Type 'date [DT_DATE]' in 'DataType' text box
            uIDataTypeEdit.Text = this.MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams.UIDataTypeEditText;

            // Click 'Length' row
            Mouse.Click(uILengthRow, new Point(193, 7));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesSetDescription - Use 'MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesSetDescription()
        {
            #region Variable Declarations
            WinRow uIDescriptionRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDescriptionRow;
            WinEdit uIDescriptionEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIDescriptionEdit;
            WinRow uINameRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UINameRow;
            #endregion

            // Click 'Description' row
            Mouse.Click(uIDescriptionRow, new Point(226, 11));

            // Type 'This is a description' in 'Description' text box
            uIDescriptionEdit.Text = this.MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams.UIDescriptionEditText;

            // Click 'Name' row
            Mouse.Click(uINameRow, new Point(250, 7));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesSetLineageID - Use 'MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesSetLineageID()
        {
            #region Variable Declarations
            WinRow uIInputColumnLineageIDRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIInputColumnLineageIDRow;
            WinEdit uIInputColumnLineageIDEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIInputColumnLineageIDEdit;
            WinRow uINameRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UINameRow;
            #endregion

            // Click 'InputColumnLineageIDs' row
            Mouse.Click(uIInputColumnLineageIDRow, new Point(226, 9));

            // Type '#23' in 'InputColumnLineageIDs' text box
            uIInputColumnLineageIDEdit.Text = this.MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams.UIInputColumnLineageIDEditText;

            // Click 'Name' row
            Mouse.Click(uINameRow, new Point(260, 8));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBad - Use 'MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBad()
        {
            #region Variable Declarations
            WinRow uIInputColumnLineageIDRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIInputColumnLineageIDRow;
            WinButton uIRefreshButton = this.UIAdvancedEditorforMulWindow.UIRefreshWindow.UIRefreshButton;
            WinRow uIInputColumnLineageIDRow1 = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIInputColumnLineageIDRow1;
            #endregion

            // Click 'InputColumnLineageIDs' row
            Mouse.Click(uIInputColumnLineageIDRow, new Point(219, 8));

            // Type ',{#}24' in 'InputColumnLineageIDs' row
            Keyboard.SendKeys(uIInputColumnLineageIDRow, this.MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams.UIInputColumnLineageIDRowSendKeys, ModifierKeys.None);

            // Click 'Re&fresh' button
            Mouse.Click(uIRefreshButton, new Point(147, 19));

            // Click 'InputColumnLineageIDs' row
            Mouse.Click(uIInputColumnLineageIDRow1, new Point(233, 8));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1 - Use 'MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1()
        {
            #region Variable Declarations
            WinRow uIHashTypeRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIHashTypeRow;
            WinEdit uIHashTypeEdit = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIHashTypeEdit;
            #endregion

            // Click 'HashType' row
            Mouse.Click(uIHashTypeRow, new Point(229, 9));

            // Type 's' in 'HashType' text box
            Keyboard.SendKeys(uIHashTypeEdit, this.MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params.UIHashTypeEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorMultipleThreadsAuto - Use 'MultipleHashAdvancedEditorMultipleThreadsAutoParams' to pass parameters into this method.
        /// </summary>
        public void MultipleHashAdvancedEditorMultipleThreadsAuto()
        {
            #region Variable Declarations
            WinRow uIMultipleThreadsRow = this.UIAdvancedEditorforMulWindow.UIPropertyGridViewWindow.UIPropertyGridViewTable.UIMultipleThreadsRow;
            #endregion

            // Click 'MultipleThreads' row
            Mouse.Click(uIMultipleThreadsRow, new Point(425, 12));

            // Type 'a' in 'MultipleThreads' row
            Keyboard.SendKeys(uIMultipleThreadsRow, this.MultipleHashAdvancedEditorMultipleThreadsAutoParams.UIMultipleThreadsRowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorOk
        /// </summary>
        public void MultipleHashAdvancedEditorOk()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIAdvancedEditorforMulWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(47, 14));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorOpen
        /// </summary>
        public void MultipleHashAdvancedEditorOpen()
        {
            #region Variable Declarations
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow1.UIDataFlowDiagramClient;
            WinMenuItem uIShowAdvancedEditorMenuItem = this.UIComponentMenuWindow.UIComponentMenuMenu.UIShowAdvancedEditorMenuItem;
            #endregion

            // Right-Click 'Data Flow Diagram' client
            Mouse.Click(uIDataFlowDiagramClient, MouseButtons.Right, ModifierKeys.None, new Point(144, 222));

            // Click 'Show Advanced Editor...' menu item
            Mouse.Click(uIShowAdvancedEditorMenuItem, new Point(57, 6));
        }
        
        /// <summary>
        /// MultipleHashAdvancedEditorOpenWhenDetached
        /// </summary>
        public void MultipleHashAdvancedEditorOpenWhenDetached()
        {
            #region Variable Declarations
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow1.UIDataFlowDiagramClient;
            WinMenuItem uIShowAdvancedEditorMenuItem = this.UIComponentMenuWindow.UIComponentMenuMenu.UIShowAdvancedEditorMenuItem;
            WinButton uIYesButton = this.UIMicrosoftVisualStudiWindow.UIOKWindow.UIYesButton;
            #endregion

            // Right-Click 'Data Flow Diagram' client
            Mouse.Click(uIDataFlowDiagramClient, MouseButtons.Right, ModifierKeys.None, new Point(120, 222));

            // Click 'Show Advanced Editor...' menu item
            Mouse.Click(uIShowAdvancedEditorMenuItem, new Point(68, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(28, 11));
        }
        
        /// <summary>
        /// MultipleThreadAutoToNone - Use 'MultipleThreadAutoToNoneParams' to pass parameters into this method.
        /// </summary>
        public void MultipleThreadAutoToNone()
        {
            #region Variable Declarations
            WinComboBox uICbThreadingComboBox = this.UIMultipleHashFormWindow.UICbThreadingWindow.UICbThreadingComboBox;
            #endregion

            // Select 'Auto' in 'cbThreading' combo box
            uICbThreadingComboBox.SelectedItem = this.MultipleThreadAutoToNoneParams.UICbThreadingComboBoxSelectedItem;

            // Select 'None' in 'cbThreading' combo box
            uICbThreadingComboBox.SelectedItem = this.MultipleThreadAutoToNoneParams.UICbThreadingComboBoxSelectedItem1;
        }
        
        /// <summary>
        /// MultipleThreadNoneToAuto - Use 'MultipleThreadNoneToAutoParams' to pass parameters into this method.
        /// </summary>
        public void MultipleThreadNoneToAuto()
        {
            #region Variable Declarations
            WinComboBox uICbThreadingComboBox = this.UIMultipleHashFormWindow.UICbThreadingWindow.UICbThreadingComboBox;
            #endregion

            // Select 'Auto' in 'cbThreading' combo box
            uICbThreadingComboBox.SelectedItem = this.MultipleThreadNoneToAutoParams.UICbThreadingComboBoxSelectedItem;
        }
        
        /// <summary>
        /// MultipleThreadNoneToOn - Use 'MultipleThreadNoneToOnParams' to pass parameters into this method.
        /// </summary>
        public void MultipleThreadNoneToOn()
        {
            #region Variable Declarations
            WinComboBox uICbThreadingComboBox = this.UIMultipleHashFormWindow.UICbThreadingWindow.UICbThreadingComboBox;
            #endregion

            // Select 'On' in 'cbThreading' combo box
            uICbThreadingComboBox.SelectedItem = this.MultipleThreadNoneToOnParams.UICbThreadingComboBoxSelectedItem;
        }
        
        /// <summary>
        /// OpenMultipleHash
        /// </summary>
        public void OpenMultipleHash()
        {
            #region Variable Declarations
            WinClient uIDataFlowDiagramClient = this.UIStartPageMicrosoftViWindow.UIItemWindow1.UIDataFlowDiagramClient;
            #endregion

            // Double-Click 'Data Flow Diagram' client
            Mouse.DoubleClick(uIDataFlowDiagramClient, new Point(104, 232));
        }
        
        /// <summary>
        /// SafeNullHandlingClear - Use 'SafeNullHandlingClearParams' to pass parameters into this method.
        /// </summary>
        public void SafeNullHandlingClear()
        {
            #region Variable Declarations
            WinCheckBox uISafeNullHandlingCheckBox = this.UIMultipleHashFormWindow.UISafeNullHandlingWindow.UISafeNullHandlingCheckBox;
            WinButton uIOKButton = this.UIMultipleHashFormWindow.UIOKWindow.UIOKButton;
            #endregion

            // Clear 'Safe Null Handling' check box
            uISafeNullHandlingCheckBox.Checked = this.SafeNullHandlingClearParams.UISafeNullHandlingCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(23, 3));
        }
        
        /// <summary>
        /// SafeNullHandlingSelect - Use 'SafeNullHandlingSelectParams' to pass parameters into this method.
        /// </summary>
        public void SafeNullHandlingSelect()
        {
            #region Variable Declarations
            WinCheckBox uISafeNullHandlingCheckBox = this.UIMultipleHashFormWindow.UISafeNullHandlingWindow.UISafeNullHandlingCheckBox;
            WinButton uIOKButton = this.UIMultipleHashFormWindow.UIOKWindow.UIOKButton;
            #endregion

            // Select 'Safe Null Handling' check box
            uISafeNullHandlingCheckBox.Checked = this.SafeNullHandlingSelectParams.UISafeNullHandlingCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(21, 7));
        }
        
        /// <summary>
        /// SelectInputColumn
        /// </summary>
        public void SelectInputColumn()
        {
            #region Variable Declarations
            WinCell uIFalseCell = this.UIMultipleHashFormWindow.UIDgvAvailableColumnsWindow.UIDataGridViewTable.UIRow0Row.UIFalseCell;
            #endregion

            // Click 'False' cell
            Mouse.Click(uIFalseCell, new Point(25, 11));
        }
        
        #region Properties
        public virtual AddPathParams AddPathParams
        {
            get
            {
                if ((this.mAddPathParams == null))
                {
                    this.mAddPathParams = new AddPathParams();
                }
                return this.mAddPathParams;
            }
        }
        
        public virtual AssertAddOutputNotAllowedExpectedValues AssertAddOutputNotAllowedExpectedValues
        {
            get
            {
                if ((this.mAssertAddOutputNotAllowedExpectedValues == null))
                {
                    this.mAssertAddOutputNotAllowedExpectedValues = new AssertAddOutputNotAllowedExpectedValues();
                }
                return this.mAssertAddOutputNotAllowedExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorInputColumnCheckedExpectedValues AssertAdvancedEditorInputColumnCheckedExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorInputColumnCheckedExpectedValues == null))
                {
                    this.mAssertAdvancedEditorInputColumnCheckedExpectedValues = new AssertAdvancedEditorInputColumnCheckedExpectedValues();
                }
                return this.mAssertAdvancedEditorInputColumnCheckedExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorInputColumnUnCheckedExpectedValues AssertAdvancedEditorInputColumnUnCheckedExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorInputColumnUnCheckedExpectedValues == null))
                {
                    this.mAssertAdvancedEditorInputColumnUnCheckedExpectedValues = new AssertAdvancedEditorInputColumnUnCheckedExpectedValues();
                }
                return this.mAssertAdvancedEditorInputColumnUnCheckedExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorInputReadWriteNotSupportedExpectedValues == null))
                {
                    this.mAssertAdvancedEditorInputReadWriteNotSupportedExpectedValues = new AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues();
                }
                return this.mAssertAdvancedEditorInputReadWriteNotSupportedExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorMultipleThreadAutoExpectedValues AssertAdvancedEditorMultipleThreadAutoExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorMultipleThreadAutoExpectedValues == null))
                {
                    this.mAssertAdvancedEditorMultipleThreadAutoExpectedValues = new AssertAdvancedEditorMultipleThreadAutoExpectedValues();
                }
                return this.mAssertAdvancedEditorMultipleThreadAutoExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorMultipleThreadNoneExpectedValues AssertAdvancedEditorMultipleThreadNoneExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorMultipleThreadNoneExpectedValues == null))
                {
                    this.mAssertAdvancedEditorMultipleThreadNoneExpectedValues = new AssertAdvancedEditorMultipleThreadNoneExpectedValues();
                }
                return this.mAssertAdvancedEditorMultipleThreadNoneExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorMultipleThreadOnExpectedValues AssertAdvancedEditorMultipleThreadOnExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorMultipleThreadOnExpectedValues == null))
                {
                    this.mAssertAdvancedEditorMultipleThreadOnExpectedValues = new AssertAdvancedEditorMultipleThreadOnExpectedValues();
                }
                return this.mAssertAdvancedEditorMultipleThreadOnExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorOutputColumnDescriptionExpectedValues AssertAdvancedEditorOutputColumnDescriptionExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorOutputColumnDescriptionExpectedValues == null))
                {
                    this.mAssertAdvancedEditorOutputColumnDescriptionExpectedValues = new AssertAdvancedEditorOutputColumnDescriptionExpectedValues();
                }
                return this.mAssertAdvancedEditorOutputColumnDescriptionExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorOutputColumnHashTypeExpectedValues AssertAdvancedEditorOutputColumnHashTypeExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorOutputColumnHashTypeExpectedValues == null))
                {
                    this.mAssertAdvancedEditorOutputColumnHashTypeExpectedValues = new AssertAdvancedEditorOutputColumnHashTypeExpectedValues();
                }
                return this.mAssertAdvancedEditorOutputColumnHashTypeExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorOutputColumnLineageIDOKExpectedValues == null))
                {
                    this.mAssertAdvancedEditorOutputColumnLineageIDOKExpectedValues = new AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues();
                }
                return this.mAssertAdvancedEditorOutputColumnLineageIDOKExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorOutputColumnNameExpectedValues AssertAdvancedEditorOutputColumnNameExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorOutputColumnNameExpectedValues == null))
                {
                    this.mAssertAdvancedEditorOutputColumnNameExpectedValues = new AssertAdvancedEditorOutputColumnNameExpectedValues();
                }
                return this.mAssertAdvancedEditorOutputColumnNameExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorOutputColumnSHA1LengthExpectedValues == null))
                {
                    this.mAssertAdvancedEditorOutputColumnSHA1LengthExpectedValues = new AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues();
                }
                return this.mAssertAdvancedEditorOutputColumnSHA1LengthExpectedValues;
            }
        }
        
        public virtual AssertAdvancedEditorPropertyValueNotSupportedExpectedValues AssertAdvancedEditorPropertyValueNotSupportedExpectedValues
        {
            get
            {
                if ((this.mAssertAdvancedEditorPropertyValueNotSupportedExpectedValues == null))
                {
                    this.mAssertAdvancedEditorPropertyValueNotSupportedExpectedValues = new AssertAdvancedEditorPropertyValueNotSupportedExpectedValues();
                }
                return this.mAssertAdvancedEditorPropertyValueNotSupportedExpectedValues;
            }
        }
        
        public virtual AssertMultipleThreadAutoExpectedValues AssertMultipleThreadAutoExpectedValues
        {
            get
            {
                if ((this.mAssertMultipleThreadAutoExpectedValues == null))
                {
                    this.mAssertMultipleThreadAutoExpectedValues = new AssertMultipleThreadAutoExpectedValues();
                }
                return this.mAssertMultipleThreadAutoExpectedValues;
            }
        }
        
        public virtual AssertMultipleThreadNoneExpectedValues AssertMultipleThreadNoneExpectedValues
        {
            get
            {
                if ((this.mAssertMultipleThreadNoneExpectedValues == null))
                {
                    this.mAssertMultipleThreadNoneExpectedValues = new AssertMultipleThreadNoneExpectedValues();
                }
                return this.mAssertMultipleThreadNoneExpectedValues;
            }
        }
        
        public virtual AssertMultipleThreadOnExpectedValues AssertMultipleThreadOnExpectedValues
        {
            get
            {
                if ((this.mAssertMultipleThreadOnExpectedValues == null))
                {
                    this.mAssertMultipleThreadOnExpectedValues = new AssertMultipleThreadOnExpectedValues();
                }
                return this.mAssertMultipleThreadOnExpectedValues;
            }
        }
        
        public virtual AssertOutputColumnsAreZeroExpectedValues AssertOutputColumnsAreZeroExpectedValues
        {
            get
            {
                if ((this.mAssertOutputColumnsAreZeroExpectedValues == null))
                {
                    this.mAssertOutputColumnsAreZeroExpectedValues = new AssertOutputColumnsAreZeroExpectedValues();
                }
                return this.mAssertOutputColumnsAreZeroExpectedValues;
            }
        }
        
        public virtual AssertSafeNullHandlingClearAssertExpectedValues AssertSafeNullHandlingClearAssertExpectedValues
        {
            get
            {
                if ((this.mAssertSafeNullHandlingClearAssertExpectedValues == null))
                {
                    this.mAssertSafeNullHandlingClearAssertExpectedValues = new AssertSafeNullHandlingClearAssertExpectedValues();
                }
                return this.mAssertSafeNullHandlingClearAssertExpectedValues;
            }
        }
        
        public virtual AssertSafeNullHandlingSelectAssertExpectedValues AssertSafeNullHandlingSelectAssertExpectedValues
        {
            get
            {
                if ((this.mAssertSafeNullHandlingSelectAssertExpectedValues == null))
                {
                    this.mAssertSafeNullHandlingSelectAssertExpectedValues = new AssertSafeNullHandlingSelectAssertExpectedValues();
                }
                return this.mAssertSafeNullHandlingSelectAssertExpectedValues;
            }
        }
        
        public virtual DeletePathFromScriptToMultipleHashParams DeletePathFromScriptToMultipleHashParams
        {
            get
            {
                if ((this.mDeletePathFromScriptToMultipleHashParams == null))
                {
                    this.mDeletePathFromScriptToMultipleHashParams = new DeletePathFromScriptToMultipleHashParams();
                }
                return this.mDeletePathFromScriptToMultipleHashParams;
            }
        }
        
        public virtual LoadVS2008AndAddMultipleHashParams LoadVS2008AndAddMultipleHashParams
        {
            get
            {
                if ((this.mLoadVS2008AndAddMultipleHashParams == null))
                {
                    this.mLoadVS2008AndAddMultipleHashParams = new LoadVS2008AndAddMultipleHashParams();
                }
                return this.mLoadVS2008AndAddMultipleHashParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputColumnsSelectColumn_1Params == null))
                {
                    this.mMultipleHashAdvancedEditorInputColumnsSelectColumn_1Params = new MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params();
                }
                return this.mMultipleHashAdvancedEditorInputColumnsSelectColumn_1Params;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputColumnsSetReadWriteParams MultipleHashAdvancedEditorInputColumnsSetReadWriteParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputColumnsSetReadWriteParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputColumnsSetReadWriteParams = new MultipleHashAdvancedEditorInputColumnsSetReadWriteParams();
                }
                return this.mMultipleHashAdvancedEditorInputColumnsSetReadWriteParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputColumnsUnselectColumnParams MultipleHashAdvancedEditorInputColumnsUnselectColumnParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputColumnsUnselectColumnParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputColumnsUnselectColumnParams = new MultipleHashAdvancedEditorInputColumnsUnselectColumnParams();
                }
                return this.mMultipleHashAdvancedEditorInputColumnsUnselectColumnParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams = new MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams = new MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams = new MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams = new MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams = new MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams = new MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams;
            }
        }
        
        public virtual MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params == null))
                {
                    this.mMultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params = new MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params();
                }
                return this.mMultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params;
            }
        }
        
        public virtual MultipleHashAdvancedEditorMultipleThreadsAutoParams MultipleHashAdvancedEditorMultipleThreadsAutoParams
        {
            get
            {
                if ((this.mMultipleHashAdvancedEditorMultipleThreadsAutoParams == null))
                {
                    this.mMultipleHashAdvancedEditorMultipleThreadsAutoParams = new MultipleHashAdvancedEditorMultipleThreadsAutoParams();
                }
                return this.mMultipleHashAdvancedEditorMultipleThreadsAutoParams;
            }
        }
        
        public virtual MultipleThreadAutoToNoneParams MultipleThreadAutoToNoneParams
        {
            get
            {
                if ((this.mMultipleThreadAutoToNoneParams == null))
                {
                    this.mMultipleThreadAutoToNoneParams = new MultipleThreadAutoToNoneParams();
                }
                return this.mMultipleThreadAutoToNoneParams;
            }
        }
        
        public virtual MultipleThreadNoneToAutoParams MultipleThreadNoneToAutoParams
        {
            get
            {
                if ((this.mMultipleThreadNoneToAutoParams == null))
                {
                    this.mMultipleThreadNoneToAutoParams = new MultipleThreadNoneToAutoParams();
                }
                return this.mMultipleThreadNoneToAutoParams;
            }
        }
        
        public virtual MultipleThreadNoneToOnParams MultipleThreadNoneToOnParams
        {
            get
            {
                if ((this.mMultipleThreadNoneToOnParams == null))
                {
                    this.mMultipleThreadNoneToOnParams = new MultipleThreadNoneToOnParams();
                }
                return this.mMultipleThreadNoneToOnParams;
            }
        }
        
        public virtual SafeNullHandlingClearParams SafeNullHandlingClearParams
        {
            get
            {
                if ((this.mSafeNullHandlingClearParams == null))
                {
                    this.mSafeNullHandlingClearParams = new SafeNullHandlingClearParams();
                }
                return this.mSafeNullHandlingClearParams;
            }
        }
        
        public virtual SafeNullHandlingSelectParams SafeNullHandlingSelectParams
        {
            get
            {
                if ((this.mSafeNullHandlingSelectParams == null))
                {
                    this.mSafeNullHandlingSelectParams = new SafeNullHandlingSelectParams();
                }
                return this.mSafeNullHandlingSelectParams;
            }
        }
        
        public UIStartPageMicrosoftViWindow UIStartPageMicrosoftViWindow
        {
            get
            {
                if ((this.mUIStartPageMicrosoftViWindow == null))
                {
                    this.mUIStartPageMicrosoftViWindow = new UIStartPageMicrosoftViWindow();
                }
                return this.mUIStartPageMicrosoftViWindow;
            }
        }
        
        public UIOpenProjectWindow UIOpenProjectWindow
        {
            get
            {
                if ((this.mUIOpenProjectWindow == null))
                {
                    this.mUIOpenProjectWindow = new UIOpenProjectWindow();
                }
                return this.mUIOpenProjectWindow;
            }
        }
        
        public UIMultipleHashFormWindow UIMultipleHashFormWindow
        {
            get
            {
                if ((this.mUIMultipleHashFormWindow == null))
                {
                    this.mUIMultipleHashFormWindow = new UIMultipleHashFormWindow();
                }
                return this.mUIMultipleHashFormWindow;
            }
        }
        
        public UIComponentMenuWindow UIComponentMenuWindow
        {
            get
            {
                if ((this.mUIComponentMenuWindow == null))
                {
                    this.mUIComponentMenuWindow = new UIComponentMenuWindow();
                }
                return this.mUIComponentMenuWindow;
            }
        }
        
        public UIAdvancedEditorforMulWindow UIAdvancedEditorforMulWindow
        {
            get
            {
                if ((this.mUIAdvancedEditorforMulWindow == null))
                {
                    this.mUIAdvancedEditorforMulWindow = new UIAdvancedEditorforMulWindow();
                }
                return this.mUIAdvancedEditorforMulWindow;
            }
        }
        
        public UIWindowsFormsParkingWWindow UIWindowsFormsParkingWWindow
        {
            get
            {
                if ((this.mUIWindowsFormsParkingWWindow == null))
                {
                    this.mUIWindowsFormsParkingWWindow = new UIWindowsFormsParkingWWindow();
                }
                return this.mUIWindowsFormsParkingWWindow;
            }
        }
        
        public UIMicrosoftVisualStudiWindow UIMicrosoftVisualStudiWindow
        {
            get
            {
                if ((this.mUIMicrosoftVisualStudiWindow == null))
                {
                    this.mUIMicrosoftVisualStudiWindow = new UIMicrosoftVisualStudiWindow();
                }
                return this.mUIMicrosoftVisualStudiWindow;
            }
        }
        
        public UIPropertiesWindowWindow UIPropertiesWindowWindow
        {
            get
            {
                if ((this.mUIPropertiesWindowWindow == null))
                {
                    this.mUIPropertiesWindowWindow = new UIPropertiesWindowWindow();
                }
                return this.mUIPropertiesWindowWindow;
            }
        }
        
        public UIMicrosoftVisualStudiWindow1 UIMicrosoftVisualStudiWindow1
        {
            get
            {
                if ((this.mUIMicrosoftVisualStudiWindow1 == null))
                {
                    this.mUIMicrosoftVisualStudiWindow1 = new UIMicrosoftVisualStudiWindow1();
                }
                return this.mUIMicrosoftVisualStudiWindow1;
            }
        }
        
        public UIDataFlowWindow UIDataFlowWindow
        {
            get
            {
                if ((this.mUIDataFlowWindow == null))
                {
                    this.mUIDataFlowWindow = new UIDataFlowWindow();
                }
                return this.mUIDataFlowWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddPathParams mAddPathParams;
        
        private AssertAddOutputNotAllowedExpectedValues mAssertAddOutputNotAllowedExpectedValues;
        
        private AssertAdvancedEditorInputColumnCheckedExpectedValues mAssertAdvancedEditorInputColumnCheckedExpectedValues;
        
        private AssertAdvancedEditorInputColumnUnCheckedExpectedValues mAssertAdvancedEditorInputColumnUnCheckedExpectedValues;
        
        private AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues mAssertAdvancedEditorInputReadWriteNotSupportedExpectedValues;
        
        private AssertAdvancedEditorMultipleThreadAutoExpectedValues mAssertAdvancedEditorMultipleThreadAutoExpectedValues;
        
        private AssertAdvancedEditorMultipleThreadNoneExpectedValues mAssertAdvancedEditorMultipleThreadNoneExpectedValues;
        
        private AssertAdvancedEditorMultipleThreadOnExpectedValues mAssertAdvancedEditorMultipleThreadOnExpectedValues;
        
        private AssertAdvancedEditorOutputColumnDescriptionExpectedValues mAssertAdvancedEditorOutputColumnDescriptionExpectedValues;
        
        private AssertAdvancedEditorOutputColumnHashTypeExpectedValues mAssertAdvancedEditorOutputColumnHashTypeExpectedValues;
        
        private AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues mAssertAdvancedEditorOutputColumnLineageIDOKExpectedValues;
        
        private AssertAdvancedEditorOutputColumnNameExpectedValues mAssertAdvancedEditorOutputColumnNameExpectedValues;
        
        private AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues mAssertAdvancedEditorOutputColumnSHA1LengthExpectedValues;
        
        private AssertAdvancedEditorPropertyValueNotSupportedExpectedValues mAssertAdvancedEditorPropertyValueNotSupportedExpectedValues;
        
        private AssertMultipleThreadAutoExpectedValues mAssertMultipleThreadAutoExpectedValues;
        
        private AssertMultipleThreadNoneExpectedValues mAssertMultipleThreadNoneExpectedValues;
        
        private AssertMultipleThreadOnExpectedValues mAssertMultipleThreadOnExpectedValues;
        
        private AssertOutputColumnsAreZeroExpectedValues mAssertOutputColumnsAreZeroExpectedValues;
        
        private AssertSafeNullHandlingClearAssertExpectedValues mAssertSafeNullHandlingClearAssertExpectedValues;
        
        private AssertSafeNullHandlingSelectAssertExpectedValues mAssertSafeNullHandlingSelectAssertExpectedValues;
        
        private DeletePathFromScriptToMultipleHashParams mDeletePathFromScriptToMultipleHashParams;
        
        private LoadVS2008AndAddMultipleHashParams mLoadVS2008AndAddMultipleHashParams;
        
        private MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params mMultipleHashAdvancedEditorInputColumnsSelectColumn_1Params;
        
        private MultipleHashAdvancedEditorInputColumnsSetReadWriteParams mMultipleHashAdvancedEditorInputColumnsSetReadWriteParams;
        
        private MultipleHashAdvancedEditorInputColumnsUnselectColumnParams mMultipleHashAdvancedEditorInputColumnsUnselectColumnParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams mMultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams mMultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams mMultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams mMultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams mMultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams;
        
        private MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params mMultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params;
        
        private MultipleHashAdvancedEditorMultipleThreadsAutoParams mMultipleHashAdvancedEditorMultipleThreadsAutoParams;
        
        private MultipleThreadAutoToNoneParams mMultipleThreadAutoToNoneParams;
        
        private MultipleThreadNoneToAutoParams mMultipleThreadNoneToAutoParams;
        
        private MultipleThreadNoneToOnParams mMultipleThreadNoneToOnParams;
        
        private SafeNullHandlingClearParams mSafeNullHandlingClearParams;
        
        private SafeNullHandlingSelectParams mSafeNullHandlingSelectParams;
        
        private UIStartPageMicrosoftViWindow mUIStartPageMicrosoftViWindow;
        
        private UIOpenProjectWindow mUIOpenProjectWindow;
        
        private UIMultipleHashFormWindow mUIMultipleHashFormWindow;
        
        private UIComponentMenuWindow mUIComponentMenuWindow;
        
        private UIAdvancedEditorforMulWindow mUIAdvancedEditorforMulWindow;
        
        private UIWindowsFormsParkingWWindow mUIWindowsFormsParkingWWindow;
        
        private UIMicrosoftVisualStudiWindow mUIMicrosoftVisualStudiWindow;
        
        private UIPropertiesWindowWindow mUIPropertiesWindowWindow;
        
        private UIMicrosoftVisualStudiWindow1 mUIMicrosoftVisualStudiWindow1;
        
        private UIDataFlowWindow mUIDataFlowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddPath'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AddPathParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Multiple Hash' in 'To:' combo box
        /// </summary>
        public string UITOComboBoxSelectedItem = "Multiple Hash";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddOutputNotAllowed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAddOutputNotAllowedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Component Multiple Hash does not allow adding outp...' label's property 'DisplayText' equals 'Component Multiple Hash does not allow adding outputs. (Microsoft.SqlServer.DTSPipelineWrap)'
        /// </summary>
        public string UIComponentMultipleHasTextDisplayText = "Component Multiple Hash does not allow adding outputs. (Microsoft.SqlServer.DTSPi" +
            "pelineWrap)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorInputColumnChecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorInputColumnCheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'row 0, column 0' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIRow0column0CheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorInputColumnUnChecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorInputColumnUnCheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'row 0, column 0' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIRow0column0CheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorInputReadWriteNotSupported'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorInputReadWriteNotSupportedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Error at Data Flow Task [Multiple Hash [24]]: Syst...' label's property 'DisplayText' contains 'System.Exception: Read write not supported.'
        /// </summary>
        public string UIErroratDataFlowTaskMTextDisplayText = "System.Exception: Read write not supported.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorMultipleThreadAuto'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorMultipleThreadAutoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'MultipleThreads' row's property 'Value' equals 'Auto'
        /// </summary>
        public string UIMultipleThreadsRowValue = "Auto";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorMultipleThreadNone'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorMultipleThreadNoneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'MultipleThreads' row's property 'Value' equals 'None'
        /// </summary>
        public string UIMultipleThreadsRowValue = "None";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorMultipleThreadOn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorMultipleThreadOnExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'MultipleThreads' row's property 'Value' equals 'On'
        /// </summary>
        public string UIMultipleThreadsRowValue = "On";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorOutputColumnDescription'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorOutputColumnDescriptionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Description' row's property 'Value' equals 'This is a description'
        /// </summary>
        public string UIDescriptionRowValue = "This is a description";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorOutputColumnHashType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorOutputColumnHashTypeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'HashType' text box's property 'Text' equals 'SHA1'
        /// </summary>
        public string UIHashTypeEditText = "SHA1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorOutputColumnLineageIDOK'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorOutputColumnLineageIDOKExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'InputColumnLineageIDs' row's property 'Value' equals '#23'
        /// </summary>
        public string UIInputColumnLineageIDRowValue = "#23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorOutputColumnName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorOutputColumnNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Name' row's property 'Value' equals 'NewColumn'
        /// </summary>
        public string UINameRowValue = "NewColumn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorOutputColumnSHA1Length'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorOutputColumnSHA1LengthExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Length' row's property 'Value' equals '20'
        /// </summary>
        public string UILengthRowValue = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdvancedEditorPropertyValueNotSupported'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertAdvancedEditorPropertyValueNotSupportedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Property value is not valid.' label's property 'DisplayText' equals 'Property value is not valid.'
        /// </summary>
        public string UIPropertyvalueisnotvaTextDisplayText = "Property value is not valid.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMultipleThreadAuto'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMultipleThreadAutoExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Auto'
        /// </summary>
        public string UIItemEditText = "Auto";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMultipleThreadNone'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMultipleThreadNoneExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'None'
        /// </summary>
        public string UIItemEditText = "None";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMultipleThreadOn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMultipleThreadOnExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'On'
        /// </summary>
        public string UIItemEditText = "On";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOutputColumnsAreZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertOutputColumnsAreZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Count' row's property 'Value' equals '0'
        /// </summary>
        public string UICountRowValue = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSafeNullHandlingClearAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertSafeNullHandlingClearAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Safe Null Handling' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UISafeNullHandlingCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSafeNullHandlingSelectAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertSafeNullHandlingSelectAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Safe Null Handling' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UISafeNullHandlingCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeletePathFromScriptToMultipleHash'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class DeletePathFromScriptToMultipleHashParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}' in 'Data Flow Diagram' Diagram
        /// </summary>
        public string UIDataFlowDiagramDiagramSendKeys = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoadVS2008AndAddMultipleHash'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class LoadVS2008AndAddMultipleHashParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe'
        /// </summary>
        public string ExePath = "C:\\Program Files\\Microsoft Visual Studio 9.0\\Common7\\IDE\\devenv.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles%\Microsoft Visual Studio 9.0\Common7\IDE\devenv.exe'
        /// </summary>
        public string AlternateExePath = "%ProgramFiles%\\Microsoft Visual Studio 9.0\\Common7\\IDE\\devenv.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputColumnsSelectColumn_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputColumnsSelectColumn_1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Column' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Column";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputColumnsSetReadWrite'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputColumnsSetReadWriteParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'READWRITE' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "READWRITE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputColumnsUnselectColumn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputColumnsUnselectColumnParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Delete}' in 'Main Grid Control' table
        /// </summary>
        public string UIMainGridControlTableSendKeys = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesAddColumn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesAddColumnParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'NewColumn' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "NewColumn";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesFixDataType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesFixDataTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'byte stream [DT_BYTES]' in 'DataType' text box
        /// </summary>
        public string UIDataTypeEditText = "byte stream [DT_BYTES]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesSetDataType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesSetDataTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'date [DT_DATE]' in 'DataType' text box
        /// </summary>
        public string UIDataTypeEditText = "date [DT_DATE]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesSetDescription'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesSetDescriptionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'This is a description' in 'Description' text box
        /// </summary>
        public string UIDescriptionEditText = "This is a description";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesSetLineageID'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDParams
    {
        
        #region Fields
        /// <summary>
        /// Type '#23' in 'InputColumnLineageIDs' text box
        /// </summary>
        public string UIInputColumnLineageIDEditText = "#23";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBad'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesSetLineageIDBadParams
    {
        
        #region Fields
        /// <summary>
        /// Type ',{#}24' in 'InputColumnLineageIDs' row
        /// </summary>
        public string UIInputColumnLineageIDRowSendKeys = ",{#}24";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorInputOutputPropertiesSetSHA1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 's' in 'HashType' text box
        /// </summary>
        public string UIHashTypeEditSendKeys = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleHashAdvancedEditorMultipleThreadsAuto'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleHashAdvancedEditorMultipleThreadsAutoParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'a' in 'MultipleThreads' row
        /// </summary>
        public string UIMultipleThreadsRowSendKeys = "a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleThreadAutoToNone'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleThreadAutoToNoneParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Auto' in 'cbThreading' combo box
        /// </summary>
        public string UICbThreadingComboBoxSelectedItem = "Auto";
        
        /// <summary>
        /// Select 'None' in 'cbThreading' combo box
        /// </summary>
        public string UICbThreadingComboBoxSelectedItem1 = "None";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleThreadNoneToAuto'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleThreadNoneToAutoParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Auto' in 'cbThreading' combo box
        /// </summary>
        public string UICbThreadingComboBoxSelectedItem = "Auto";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleThreadNoneToOn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class MultipleThreadNoneToOnParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'On' in 'cbThreading' combo box
        /// </summary>
        public string UICbThreadingComboBoxSelectedItem = "On";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SafeNullHandlingClear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class SafeNullHandlingClearParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Safe Null Handling' check box
        /// </summary>
        public bool UISafeNullHandlingCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SafeNullHandlingSelect'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class SafeNullHandlingSelectParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Safe Null Handling' check box
        /// </summary>
        public bool UISafeNullHandlingCheckBoxChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIStartPageMicrosoftViWindow : WinWindow
    {
        
        public UIStartPageMicrosoftViWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start Page - Microsoft Visual Studio (Administrator)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "wndclass_desked_gsk";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator)");
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UISolutionExplorerWindow UISolutionExplorerWindow
        {
            get
            {
                if ((this.mUISolutionExplorerWindow == null))
                {
                    this.mUISolutionExplorerWindow = new UISolutionExplorerWindow(this);
                }
                return this.mUISolutionExplorerWindow;
            }
        }
        
        public UIToolBarWindow UIToolBarWindow
        {
            get
            {
                if ((this.mUIToolBarWindow == null))
                {
                    this.mUIToolBarWindow = new UIToolBarWindow(this);
                }
                return this.mUIToolBarWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIToolboxTree UIToolboxTree
        {
            get
            {
                if ((this.mUIToolboxTree == null))
                {
                    this.mUIToolboxTree = new UIToolboxTree(this);
                }
                return this.mUIToolboxTree;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8(this);
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9(this);
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10(this);
                }
                return this.mUIItemWindow10;
            }
        }
        
        public UIItemWindow11 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UISSIS2008TestMultipleTitleBar UISSIS2008TestMultipleTitleBar
        {
            get
            {
                if ((this.mUISSIS2008TestMultipleTitleBar == null))
                {
                    this.mUISSIS2008TestMultipleTitleBar = new UISSIS2008TestMultipleTitleBar(this);
                }
                return this.mUISSIS2008TestMultipleTitleBar;
            }
        }
        
        public UIItemWindow12 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIItemWindow13 UIItemWindow13
        {
            get
            {
                if ((this.mUIItemWindow13 == null))
                {
                    this.mUIItemWindow13 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow13;
            }
        }
        
        public UIPipelineTaskViewWindow UIPipelineTaskViewWindow
        {
            get
            {
                if ((this.mUIPipelineTaskViewWindow == null))
                {
                    this.mUIPipelineTaskViewWindow = new UIPipelineTaskViewWindow(this);
                }
                return this.mUIPipelineTaskViewWindow;
            }
        }
        
        public UIItemWindow14 UIItemWindow14
        {
            get
            {
                if ((this.mUIItemWindow14 == null))
                {
                    this.mUIItemWindow14 = new UIItemWindow14(this);
                }
                return this.mUIItemWindow14;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UISolutionExplorerWindow mUISolutionExplorerWindow;
        
        private UIToolBarWindow mUIToolBarWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIToolboxTree mUIToolboxTree;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIItemWindow10 mUIItemWindow10;
        
        private UIItemWindow11 mUIItemWindow11;
        
        private UISSIS2008TestMultipleTitleBar mUISSIS2008TestMultipleTitleBar;
        
        private UIItemWindow12 mUIItemWindow12;
        
        private UIItemWindow13 mUIItemWindow13;
        
        private UIPipelineTaskViewWindow mUIPipelineTaskViewWindow;
        
        private UIItemWindow14 mUIItemWindow14;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMenuBarMenuBar : WinMenuBar
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Menu Bar";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator)");
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator)");
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIOpenMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new UIOpenMenuItem(this);
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenMenuItem : WinMenuItem
    {
        
        public UIOpenMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIProjectSolutionMenuItem
        {
            get
            {
                if ((this.mUIProjectSolutionMenuItem == null))
                {
                    this.mUIProjectSolutionMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIProjectSolutionMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Project/Solution...";
                    this.mUIProjectSolutionMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProjectSolutionMenuItem.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIProjectSolutionMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIProjectSolutionMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISolutionExplorerWindow : WinWindow
    {
        
        public UISolutionExplorerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Solution Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SysTreeView32";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISolutionExplorerTree UISolutionExplorerTree
        {
            get
            {
                if ((this.mUISolutionExplorerTree == null))
                {
                    this.mUISolutionExplorerTree = new UISolutionExplorerTree(this);
                }
                return this.mUISolutionExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private UISolutionExplorerTree mUISolutionExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISolutionExplorerTree : WinTree
    {
        
        public UISolutionExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISSIS2008TestMultipleTreeItem UISSIS2008TestMultipleTreeItem
        {
            get
            {
                if ((this.mUISSIS2008TestMultipleTreeItem == null))
                {
                    this.mUISSIS2008TestMultipleTreeItem = new UISSIS2008TestMultipleTreeItem(this);
                }
                return this.mUISSIS2008TestMultipleTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UISSIS2008TestMultipleTreeItem mUISSIS2008TestMultipleTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISSIS2008TestMultipleTreeItem : WinTreeItem
    {
        
        public UISSIS2008TestMultipleTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "SSIS2008TestMultipleHash";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISSISPackagesTreeItem UISSISPackagesTreeItem
        {
            get
            {
                if ((this.mUISSISPackagesTreeItem == null))
                {
                    this.mUISSISPackagesTreeItem = new UISSISPackagesTreeItem(this);
                }
                return this.mUISSISPackagesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UISSISPackagesTreeItem mUISSISPackagesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISSISPackagesTreeItem : WinTreeItem
    {
        
        public UISSISPackagesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "SSIS Packages";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIEmptyUnitTestPackageTreeItem
        {
            get
            {
                if ((this.mUIEmptyUnitTestPackageTreeItem == null))
                {
                    this.mUIEmptyUnitTestPackageTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIEmptyUnitTestPackageTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "EmptyUnitTestPackage.dtsx";
                    this.mUIEmptyUnitTestPackageTreeItem.SearchProperties["Value"] = "2";
                    this.mUIEmptyUnitTestPackageTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEmptyUnitTestPackageTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIEmptyUnitTestPackageTreeItem.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIEmptyUnitTestPackageTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIEmptyUnitTestPackageTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToolBarWindow : WinWindow
    {
        
        public UIToolBarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "toolBar";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIToolBarToolBar UIToolBarToolBar
        {
            get
            {
                if ((this.mUIToolBarToolBar == null))
                {
                    this.mUIToolBarToolBar = new UIToolBarToolBar(this);
                }
                return this.mUIToolBarToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIToolBarToolBar mUIToolBarToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToolBarToolBar : WinToolBar
    {
        
        public UIToolBarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "View";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinButton UIDataFlowButton
        {
            get
            {
                if ((this.mUIDataFlowButton == null))
                {
                    this.mUIDataFlowButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDataFlowButton.SearchProperties[WinButton.PropertyNames.Name] = "Data Flow";
                    this.mUIDataFlowButton.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDataFlowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "VsChannel";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UISSIS2008TestMultipleClient
        {
            get
            {
                if ((this.mUISSIS2008TestMultipleClient == null))
                {
                    this.mUISSIS2008TestMultipleClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISSIS2008TestMultipleClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISSIS2008TestMultipleClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISSIS2008TestMultipleClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToolboxTree : WinTree
    {
        
        public UIToolboxTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Toolbox";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinListItem UIMultipleHashListItem
        {
            get
            {
                if ((this.mUIMultipleHashListItem == null))
                {
                    this.mUIMultipleHashListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIMultipleHashListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Multiple Hash";
                    this.mUIMultipleHashListItem.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIMultipleHashListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMultipleHashListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "EzMdiContainer";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIWorkspaceClient
        {
            get
            {
                if ((this.mUIWorkspaceClient == null))
                {
                    this.mUIWorkspaceClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIWorkspaceClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIWorkspaceClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIWorkspaceClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISSIS2008TestMultipleTitleBar : WinTitleBar
    {
        
        public UISSIS2008TestMultipleTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "F3 Overlay", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPipelineTaskViewWindow : WinWindow
    {
        
        public UIPipelineTaskViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "PipelineTaskView";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIToeditaDataFlowtasksClient UIToeditaDataFlowtasksClient
        {
            get
            {
                if ((this.mUIToeditaDataFlowtasksClient == null))
                {
                    this.mUIToeditaDataFlowtasksClient = new UIToeditaDataFlowtasksClient(this);
                }
                return this.mUIToeditaDataFlowtasksClient;
            }
        }
        #endregion
        
        #region Fields
        private UIToeditaDataFlowtasksClient mUIToeditaDataFlowtasksClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIToeditaDataFlowtasksClient : WinClient
    {
        
        public UIToeditaDataFlowtasksClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "To edit a Data Flow task, select one from the drop-down list.";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinControl UIDataFlowDiagramDiagram
        {
            get
            {
                if ((this.mUIDataFlowDiagramDiagram == null))
                {
                    this.mUIDataFlowDiagramDiagram = new WinControl(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramDiagram.SearchProperties[UITestControl.PropertyNames.Name] = "Data Flow Diagram";
                    this.mUIDataFlowDiagramDiagram.SearchProperties[UITestControl.PropertyNames.ControlType] = "Diagram";
                    this.mUIDataFlowDiagramDiagram.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramDiagram;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIDataFlowDiagramDiagram;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "F3 Overlay 0f130000";
            this.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinClient UIDataFlowDiagramClient
        {
            get
            {
                if ((this.mUIDataFlowDiagramClient == null))
                {
                    this.mUIDataFlowDiagramClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDataFlowDiagramClient.WindowTitles.Add("SSIS2008TestMultipleHash - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataFlowDiagramClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDataFlowDiagramClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOpenProjectWindow : WinWindow
    {
        
        public UIOpenProjectWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Project";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Project");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow15 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow15(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow15 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open Project");
            #endregion
        }
        
        #region Properties
        public UISSIS2008TestMultipleListItem UISSIS2008TestMultipleListItem
        {
            get
            {
                if ((this.mUISSIS2008TestMultipleListItem == null))
                {
                    this.mUISSIS2008TestMultipleListItem = new UISSIS2008TestMultipleListItem(this);
                }
                return this.mUISSIS2008TestMultipleListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISSIS2008TestMultipleListItem mUISSIS2008TestMultipleListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISSIS2008TestMultipleListItem : WinListItem
    {
        
        public UISSIS2008TestMultipleListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SSIS2008TestMultipleHash";
            this.WindowTitles.Add("Open Project");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Project");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow15 : WinWindow
    {
        
        public UIItemWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open Project");
            #endregion
        }
        
        #region Properties
        public UISSIS2008TestMultipleListItem1 UISSIS2008TestMultipleListItem
        {
            get
            {
                if ((this.mUISSIS2008TestMultipleListItem == null))
                {
                    this.mUISSIS2008TestMultipleListItem = new UISSIS2008TestMultipleListItem1(this);
                }
                return this.mUISSIS2008TestMultipleListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISSIS2008TestMultipleListItem1 mUISSIS2008TestMultipleListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISSIS2008TestMultipleListItem1 : WinListItem
    {
        
        public UISSIS2008TestMultipleListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SSIS2008TestMultipleHash.sln";
            this.WindowTitles.Add("Open Project");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Project");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMultipleHashFormWindow : WinWindow
    {
        
        public UIMultipleHashFormWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MultipleHashForm";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIDgvAvailableColumnsWindow UIDgvAvailableColumnsWindow
        {
            get
            {
                if ((this.mUIDgvAvailableColumnsWindow == null))
                {
                    this.mUIDgvAvailableColumnsWindow = new UIDgvAvailableColumnsWindow(this);
                }
                return this.mUIDgvAvailableColumnsWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISafeNullHandlingWindow UISafeNullHandlingWindow
        {
            get
            {
                if ((this.mUISafeNullHandlingWindow == null))
                {
                    this.mUISafeNullHandlingWindow = new UISafeNullHandlingWindow(this);
                }
                return this.mUISafeNullHandlingWindow;
            }
        }
        
        public UICbThreadingWindow UICbThreadingWindow
        {
            get
            {
                if ((this.mUICbThreadingWindow == null))
                {
                    this.mUICbThreadingWindow = new UICbThreadingWindow(this);
                }
                return this.mUICbThreadingWindow;
            }
        }
        
        public UITcTabsWindow UITcTabsWindow
        {
            get
            {
                if ((this.mUITcTabsWindow == null))
                {
                    this.mUITcTabsWindow = new UITcTabsWindow(this);
                }
                return this.mUITcTabsWindow;
            }
        }
        
        public UIDgvOutputColumnsWindow UIDgvOutputColumnsWindow
        {
            get
            {
                if ((this.mUIDgvOutputColumnsWindow == null))
                {
                    this.mUIDgvOutputColumnsWindow = new UIDgvOutputColumnsWindow(this);
                }
                return this.mUIDgvOutputColumnsWindow;
            }
        }
        
        public UIDgvHashColumnsWindow UIDgvHashColumnsWindow
        {
            get
            {
                if ((this.mUIDgvHashColumnsWindow == null))
                {
                    this.mUIDgvHashColumnsWindow = new UIDgvHashColumnsWindow(this);
                }
                return this.mUIDgvHashColumnsWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDgvAvailableColumnsWindow mUIDgvAvailableColumnsWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISafeNullHandlingWindow mUISafeNullHandlingWindow;
        
        private UICbThreadingWindow mUICbThreadingWindow;
        
        private UITcTabsWindow mUITcTabsWindow;
        
        private UIDgvOutputColumnsWindow mUIDgvOutputColumnsWindow;
        
        private UIDgvHashColumnsWindow mUIDgvHashColumnsWindow;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDgvAvailableColumnsWindow : WinWindow
    {
        
        public UIDgvAvailableColumnsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvAvailableColumns";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Column";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnOK";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISafeNullHandlingWindow : WinWindow
    {
        
        public UISafeNullHandlingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbSafeNullHandling";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UISafeNullHandlingCheckBox
        {
            get
            {
                if ((this.mUISafeNullHandlingCheckBox == null))
                {
                    this.mUISafeNullHandlingCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUISafeNullHandlingCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Safe Null Handling";
                    this.mUISafeNullHandlingCheckBox.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUISafeNullHandlingCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUISafeNullHandlingCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICbThreadingWindow : WinWindow
    {
        
        public UICbThreadingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cbThreading";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICbThreadingComboBox
        {
            get
            {
                if ((this.mUICbThreadingComboBox == null))
                {
                    this.mUICbThreadingComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICbThreadingComboBox.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUICbThreadingComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICbThreadingComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITcTabsWindow : WinWindow
    {
        
        public UITcTabsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tcTabs";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIOutputColumnsTabPage
        {
            get
            {
                if ((this.mUIOutputColumnsTabPage == null))
                {
                    this.mUIOutputColumnsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIOutputColumnsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Output Columns";
                    this.mUIOutputColumnsTabPage.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIOutputColumnsTabPage;
            }
        }
        
        public WinTabPage UIAboutTabPage
        {
            get
            {
                if ((this.mUIAboutTabPage == null))
                {
                    this.mUIAboutTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIAboutTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "About";
                    this.mUIAboutTabPage.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIAboutTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIOutputColumnsTabPage;
        
        private WinTabPage mUIAboutTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDgvOutputColumnsWindow : WinWindow
    {
        
        public UIDgvOutputColumnsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvOutputColumns";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable1 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIRow0Row1 UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row1(this);
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow0Row11 UIRow0Row1
        {
            get
            {
                if ((this.mUIRow0Row1 == null))
                {
                    this.mUIRow0Row1 = new UIRow0Row11(this);
                }
                return this.mUIRow0Row1;
            }
        }
        
        public UIRow0Row2 UIRow0Row2
        {
            get
            {
                if ((this.mUIRow0Row2 == null))
                {
                    this.mUIRow0Row2 = new UIRow0Row2(this);
                }
                return this.mUIRow0Row2;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row1 mUIRow0Row;
        
        private UIRow0Row11 mUIRow0Row1;
        
        private UIRow0Row2 mUIRow0Row2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "(Create New)";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCell UINullCell
        {
            get
            {
                if ((this.mUINullCell == null))
                {
                    this.mUINullCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINullCell.SearchProperties[WinCell.PropertyNames.Value] = "(null)";
                    this.mUINullCell.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUINullCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUINullCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row11 : WinRow
    {
        
        public UIRow0Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Column1;None";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCell UINoneCell
        {
            get
            {
                if ((this.mUINoneCell == null))
                {
                    this.mUINoneCell = new WinCell(this);
                    #region Search Criteria
                    this.mUINoneCell.SearchProperties[WinCell.PropertyNames.Value] = "None";
                    this.mUINoneCell.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUINoneCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUINoneCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row2 : WinRow
    {
        
        public UIRow0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "Column1;MD5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCell UIColumn1Cell
        {
            get
            {
                if ((this.mUIColumn1Cell == null))
                {
                    this.mUIColumn1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIColumn1Cell.SearchProperties[WinCell.PropertyNames.Value] = "Column1";
                    this.mUIColumn1Cell.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIColumn1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIColumn1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDgvHashColumnsWindow : WinWindow
    {
        
        public UIDgvHashColumnsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvHashColumns";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable2 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable2(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable2 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataGridViewTable2 : WinTable
    {
        
        public UIDataGridViewTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public UIRow0Row3 UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row3(this);
                }
                return this.mUIRow0Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row3 mUIRow0Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRow0Row3 : WinRow
    {
        
        public UIRow0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "False;Column;999999";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("MultipleHashForm");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("MultipleHashForm");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComponentMenuWindow : WinWindow
    {
        
        public UIComponentMenuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Component Menu";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MsoCommandBarPopup";
            this.WindowTitles.Add("Component Menu");
            #endregion
        }
        
        #region Properties
        public UIComponentMenuMenu UIComponentMenuMenu
        {
            get
            {
                if ((this.mUIComponentMenuMenu == null))
                {
                    this.mUIComponentMenuMenu = new UIComponentMenuMenu(this);
                }
                return this.mUIComponentMenuMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIComponentMenuMenu mUIComponentMenuMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComponentMenuMenu : WinMenu
    {
        
        public UIComponentMenuMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Component Menu";
            this.WindowTitles.Add("Component Menu");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIShowAdvancedEditorMenuItem
        {
            get
            {
                if ((this.mUIShowAdvancedEditorMenuItem == null))
                {
                    this.mUIShowAdvancedEditorMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIShowAdvancedEditorMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Show Advanced Editor...";
                    this.mUIShowAdvancedEditorMenuItem.WindowTitles.Add("Component Menu");
                    #endregion
                }
                return this.mUIShowAdvancedEditorMenuItem;
            }
        }
        
        public WinMenuItem UIAddPathMenuItem
        {
            get
            {
                if ((this.mUIAddPathMenuItem == null))
                {
                    this.mUIAddPathMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddPathMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Path";
                    this.mUIAddPathMenuItem.WindowTitles.Add("Component Menu");
                    #endregion
                }
                return this.mUIAddPathMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIShowAdvancedEditorMenuItem;
        
        private WinMenuItem mUIAddPathMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAdvancedEditorforMulWindow : WinWindow
    {
        
        public UIAdvancedEditorforMulWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Advanced Editor for Multiple Hash";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIPropertyGridViewWindow UIPropertyGridViewWindow
        {
            get
            {
                if ((this.mUIPropertyGridViewWindow == null))
                {
                    this.mUIPropertyGridViewWindow = new UIPropertyGridViewWindow(this);
                }
                return this.mUIPropertyGridViewWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UITheadvancededitorproTabList UITheadvancededitorproTabList
        {
            get
            {
                if ((this.mUITheadvancededitorproTabList == null))
                {
                    this.mUITheadvancededitorproTabList = new UITheadvancededitorproTabList(this);
                }
                return this.mUITheadvancededitorproTabList;
            }
        }
        
        public UIAddOutputWindow UIAddOutputWindow
        {
            get
            {
                if ((this.mUIAddOutputWindow == null))
                {
                    this.mUIAddOutputWindow = new UIAddOutputWindow(this);
                }
                return this.mUIAddOutputWindow;
            }
        }
        
        public UIInputsandoutputsTree UIInputsandoutputsTree
        {
            get
            {
                if ((this.mUIInputsandoutputsTree == null))
                {
                    this.mUIInputsandoutputsTree = new UIInputsandoutputsTree(this);
                }
                return this.mUIInputsandoutputsTree;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIColumnsGridControlWindow UIColumnsGridControlWindow
        {
            get
            {
                if ((this.mUIColumnsGridControlWindow == null))
                {
                    this.mUIColumnsGridControlWindow = new UIColumnsGridControlWindow(this);
                }
                return this.mUIColumnsGridControlWindow;
            }
        }
        
        public UIGridControlWindow UIGridControlWindow
        {
            get
            {
                if ((this.mUIGridControlWindow == null))
                {
                    this.mUIGridControlWindow = new UIGridControlWindow(this);
                }
                return this.mUIGridControlWindow;
            }
        }
        
        public UIItemWindow16 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow16(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIErroratDataFlowTaskMWindow UIErroratDataFlowTaskMWindow
        {
            get
            {
                if ((this.mUIErroratDataFlowTaskMWindow == null))
                {
                    this.mUIErroratDataFlowTaskMWindow = new UIErroratDataFlowTaskMWindow(this);
                }
                return this.mUIErroratDataFlowTaskMWindow;
            }
        }
        
        public UIAddColumnWindow UIAddColumnWindow
        {
            get
            {
                if ((this.mUIAddColumnWindow == null))
                {
                    this.mUIAddColumnWindow = new UIAddColumnWindow(this);
                }
                return this.mUIAddColumnWindow;
            }
        }
        
        public UIColumnWindow UIColumnWindow
        {
            get
            {
                if ((this.mUIColumnWindow == null))
                {
                    this.mUIColumnWindow = new UIColumnWindow(this);
                }
                return this.mUIColumnWindow;
            }
        }
        
        public UIRefreshWindow UIRefreshWindow
        {
            get
            {
                if ((this.mUIRefreshWindow == null))
                {
                    this.mUIRefreshWindow = new UIRefreshWindow(this);
                }
                return this.mUIRefreshWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPropertyGridViewWindow mUIPropertyGridViewWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UITheadvancededitorproTabList mUITheadvancededitorproTabList;
        
        private UIAddOutputWindow mUIAddOutputWindow;
        
        private UIInputsandoutputsTree mUIInputsandoutputsTree;
        
        private UICancelWindow mUICancelWindow;
        
        private UIColumnsGridControlWindow mUIColumnsGridControlWindow;
        
        private UIGridControlWindow mUIGridControlWindow;
        
        private UIItemWindow16 mUIItemWindow;
        
        private UIErroratDataFlowTaskMWindow mUIErroratDataFlowTaskMWindow;
        
        private UIAddColumnWindow mUIAddColumnWindow;
        
        private UIColumnWindow mUIColumnWindow;
        
        private UIRefreshWindow mUIRefreshWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPropertyGridViewWindow : WinWindow
    {
        
        public UIPropertyGridViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "PropertyGridView";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIPropertyGridViewTable UIPropertyGridViewTable
        {
            get
            {
                if ((this.mUIPropertyGridViewTable == null))
                {
                    this.mUIPropertyGridViewTable = new UIPropertyGridViewTable(this);
                }
                return this.mUIPropertyGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIPropertyGridViewTable mUIPropertyGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPropertyGridViewTable : WinTable
    {
        
        public UIPropertyGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "Properties Window";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinRow UIMultipleThreadsRow
        {
            get
            {
                if ((this.mUIMultipleThreadsRow == null))
                {
                    this.mUIMultipleThreadsRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIMultipleThreadsRow.SearchProperties[WinRow.PropertyNames.Name] = "MultipleThreads";
                    this.mUIMultipleThreadsRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIMultipleThreadsRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIMultipleThreadsRow;
            }
        }
        
        public WinButton UIBrowseButton
        {
            get
            {
                if ((this.mUIBrowseButton == null))
                {
                    this.mUIBrowseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBrowseButton.SearchProperties[WinButton.PropertyNames.Name] = "Browse...";
                    this.mUIBrowseButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIBrowseButton;
            }
        }
        
        public WinRow UILengthRow
        {
            get
            {
                if ((this.mUILengthRow == null))
                {
                    this.mUILengthRow = new WinRow(this);
                    #region Search Criteria
                    this.mUILengthRow.SearchProperties[WinRow.PropertyNames.Name] = "Length";
                    this.mUILengthRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUILengthRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUILengthRow;
            }
        }
        
        public WinEdit UILengthEdit
        {
            get
            {
                if ((this.mUILengthEdit == null))
                {
                    this.mUILengthEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILengthEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Length";
                    this.mUILengthEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUILengthEdit;
            }
        }
        
        public WinRow UIDataTypeRow
        {
            get
            {
                if ((this.mUIDataTypeRow == null))
                {
                    this.mUIDataTypeRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIDataTypeRow.SearchProperties[WinRow.PropertyNames.Name] = "DataType";
                    this.mUIDataTypeRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIDataTypeRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIDataTypeRow;
            }
        }
        
        public WinRow UICountRow
        {
            get
            {
                if ((this.mUICountRow == null))
                {
                    this.mUICountRow = new WinRow(this);
                    #region Search Criteria
                    this.mUICountRow.SearchProperties[WinRow.PropertyNames.Name] = "Count";
                    this.mUICountRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUICountRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUICountRow;
            }
        }
        
        public WinRow UIMappedColumnIDRow
        {
            get
            {
                if ((this.mUIMappedColumnIDRow == null))
                {
                    this.mUIMappedColumnIDRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIMappedColumnIDRow.SearchProperties[WinRow.PropertyNames.Name] = "MappedColumnID";
                    this.mUIMappedColumnIDRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIMappedColumnIDRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIMappedColumnIDRow;
            }
        }
        
        public WinRow UINameRow
        {
            get
            {
                if ((this.mUINameRow == null))
                {
                    this.mUINameRow = new WinRow(this);
                    #region Search Criteria
                    this.mUINameRow.SearchProperties[WinRow.PropertyNames.Name] = "Name";
                    this.mUINameRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUINameRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUINameRow;
            }
        }
        
        public WinRow UIHashTypeRow
        {
            get
            {
                if ((this.mUIHashTypeRow == null))
                {
                    this.mUIHashTypeRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIHashTypeRow.SearchProperties[WinRow.PropertyNames.Name] = "HashType";
                    this.mUIHashTypeRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIHashTypeRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIHashTypeRow;
            }
        }
        
        public WinEdit UIHashTypeEdit
        {
            get
            {
                if ((this.mUIHashTypeEdit == null))
                {
                    this.mUIHashTypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHashTypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "HashType";
                    this.mUIHashTypeEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIHashTypeEdit;
            }
        }
        
        public WinEdit UIDataTypeEdit
        {
            get
            {
                if ((this.mUIDataTypeEdit == null))
                {
                    this.mUIDataTypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDataTypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "DataType";
                    this.mUIDataTypeEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIDataTypeEdit;
            }
        }
        
        public WinRow UIDescriptionRow
        {
            get
            {
                if ((this.mUIDescriptionRow == null))
                {
                    this.mUIDescriptionRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIDescriptionRow.SearchProperties[WinRow.PropertyNames.Name] = "Description";
                    this.mUIDescriptionRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIDescriptionRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIDescriptionRow;
            }
        }
        
        public WinEdit UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Description";
                    this.mUIDescriptionEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        
        public WinRow UIInputColumnLineageIDRow
        {
            get
            {
                if ((this.mUIInputColumnLineageIDRow == null))
                {
                    this.mUIInputColumnLineageIDRow = new WinRow(this);
                    #region Search Criteria
                    this.mUIInputColumnLineageIDRow.SearchProperties[WinRow.PropertyNames.Name] = "InputColumnLineageIDs";
                    this.mUIInputColumnLineageIDRow.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIInputColumnLineageIDRow.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIInputColumnLineageIDRow;
            }
        }
        
        public WinEdit UIInputColumnLineageIDEdit
        {
            get
            {
                if ((this.mUIInputColumnLineageIDEdit == null))
                {
                    this.mUIInputColumnLineageIDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIInputColumnLineageIDEdit.SearchProperties[WinEdit.PropertyNames.Name] = "InputColumnLineageIDs";
                    this.mUIInputColumnLineageIDEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIInputColumnLineageIDEdit;
            }
        }
        
        public WinRow UIInputColumnLineageIDRow1
        {
            get
            {
                if ((this.mUIInputColumnLineageIDRow1 == null))
                {
                    this.mUIInputColumnLineageIDRow1 = new WinRow(this);
                    #region Search Criteria
                    this.mUIInputColumnLineageIDRow1.SearchProperties[WinRow.PropertyNames.Name] = "InputColumnLineageIDs";
                    this.mUIInputColumnLineageIDRow1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIInputColumnLineageIDRow1.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIInputColumnLineageIDRow1;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUIMultipleThreadsRow;
        
        private WinButton mUIBrowseButton;
        
        private WinRow mUILengthRow;
        
        private WinEdit mUILengthEdit;
        
        private WinRow mUIDataTypeRow;
        
        private WinRow mUICountRow;
        
        private WinRow mUIMappedColumnIDRow;
        
        private WinRow mUINameRow;
        
        private WinRow mUIHashTypeRow;
        
        private WinEdit mUIHashTypeEdit;
        
        private WinEdit mUIDataTypeEdit;
        
        private WinRow mUIDescriptionRow;
        
        private WinEdit mUIDescriptionEdit;
        
        private WinRow mUIInputColumnLineageIDRow;
        
        private WinEdit mUIInputColumnLineageIDEdit;
        
        private WinRow mUIInputColumnLineageIDRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UITheadvancededitorproTabList : WinTabList
    {
        
        public UITheadvancededitorproTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "The advanced editor provides access to the low-level properties of data flow comp" +
                "onents. Additionally, the advanced editor can be used to configure components th" +
                "at do not have a custom user interface.";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIInputColumnsTabPage
        {
            get
            {
                if ((this.mUIInputColumnsTabPage == null))
                {
                    this.mUIInputColumnsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIInputColumnsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Input Columns";
                    this.mUIInputColumnsTabPage.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIInputColumnsTabPage;
            }
        }
        
        public WinTabPage UIInputandOutputProperTabPage
        {
            get
            {
                if ((this.mUIInputandOutputProperTabPage == null))
                {
                    this.mUIInputandOutputProperTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIInputandOutputProperTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Input and Output Properties";
                    this.mUIInputandOutputProperTabPage.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIInputandOutputProperTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIInputColumnsTabPage;
        
        private WinTabPage mUIInputandOutputProperTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddOutputWindow : WinWindow
    {
        
        public UIAddOutputWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addOutputButton";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddOutputButton
        {
            get
            {
                if ((this.mUIAddOutputButton == null))
                {
                    this.mUIAddOutputButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddOutputButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Output";
                    this.mUIAddOutputButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIAddOutputButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddOutputButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInputsandoutputsTree : WinTree
    {
        
        public UIInputsandoutputsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Inputs and outputs:";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIInputTreeItem UIInputTreeItem
        {
            get
            {
                if ((this.mUIInputTreeItem == null))
                {
                    this.mUIInputTreeItem = new UIInputTreeItem(this);
                }
                return this.mUIInputTreeItem;
            }
        }
        
        public UIHashedOutputTreeItem UIHashedOutputTreeItem
        {
            get
            {
                if ((this.mUIHashedOutputTreeItem == null))
                {
                    this.mUIHashedOutputTreeItem = new UIHashedOutputTreeItem(this);
                }
                return this.mUIHashedOutputTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIInputTreeItem mUIInputTreeItem;
        
        private UIHashedOutputTreeItem mUIHashedOutputTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInputTreeItem : WinTreeItem
    {
        
        public UIInputTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Input";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIInputColumnsTreeItem UIInputColumnsTreeItem
        {
            get
            {
                if ((this.mUIInputColumnsTreeItem == null))
                {
                    this.mUIInputColumnsTreeItem = new UIInputColumnsTreeItem(this);
                }
                return this.mUIInputColumnsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIInputColumnsTreeItem mUIInputColumnsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIInputColumnsTreeItem : WinTreeItem
    {
        
        public UIInputColumnsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Input Columns";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIColumnTreeItem
        {
            get
            {
                if ((this.mUIColumnTreeItem == null))
                {
                    this.mUIColumnTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIColumnTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Column";
                    this.mUIColumnTreeItem.SearchProperties["Value"] = "2";
                    this.mUIColumnTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIColumnTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIColumnTreeItem.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIColumnTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIColumnTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHashedOutputTreeItem : WinTreeItem
    {
        
        public UIHashedOutputTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "HashedOutput";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIOutputColumnsTreeItem UIOutputColumnsTreeItem
        {
            get
            {
                if ((this.mUIOutputColumnsTreeItem == null))
                {
                    this.mUIOutputColumnsTreeItem = new UIOutputColumnsTreeItem(this);
                }
                return this.mUIOutputColumnsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOutputColumnsTreeItem mUIOutputColumnsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOutputColumnsTreeItem : WinTreeItem
    {
        
        public UIOutputColumnsTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Output Columns";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIColumn1TreeItem
        {
            get
            {
                if ((this.mUIColumn1TreeItem == null))
                {
                    this.mUIColumn1TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIColumn1TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Column1";
                    this.mUIColumn1TreeItem.SearchProperties["Value"] = "2";
                    this.mUIColumn1TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIColumn1TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIColumn1TreeItem.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIColumn1TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIColumn1TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cancelButton";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColumnsGridControlWindow : WinWindow
    {
        
        public UIColumnsGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "columnsGridControl";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIColumn0Column UIColumn0Column
        {
            get
            {
                if ((this.mUIColumn0Column == null))
                {
                    this.mUIColumn0Column = new UIColumn0Column(this);
                }
                return this.mUIColumn0Column;
            }
        }
        #endregion
        
        #region Fields
        private UIColumn0Column mUIColumn0Column;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColumn0Column : WinControl
    {
        
        public UIColumn0Column(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 0";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIRow0column0CheckBox
        {
            get
            {
                if ((this.mUIRow0column0CheckBox == null))
                {
                    this.mUIRow0column0CheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIRow0column0CheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "row 0, column 0";
                    this.mUIRow0column0CheckBox.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIRow0column0CheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIRow0column0CheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIGridControlWindow : WinWindow
    {
        
        public UIGridControlWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "gridControl";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public UIColumn2Column UIColumn2Column
        {
            get
            {
                if ((this.mUIColumn2Column == null))
                {
                    this.mUIColumn2Column = new UIColumn2Column(this);
                }
                return this.mUIColumn2Column;
            }
        }
        
        public UIColumn0Column1 UIColumn0Column
        {
            get
            {
                if ((this.mUIColumn0Column == null))
                {
                    this.mUIColumn0Column = new UIColumn0Column1(this);
                }
                return this.mUIColumn0Column;
            }
        }
        
        public WinTable UIMainGridControlTable
        {
            get
            {
                if ((this.mUIMainGridControlTable == null))
                {
                    this.mUIMainGridControlTable = new WinTable(this);
                    #region Search Criteria
                    this.mUIMainGridControlTable.SearchProperties[WinTable.PropertyNames.Name] = "Main Grid Control";
                    this.mUIMainGridControlTable.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIMainGridControlTable;
            }
        }
        #endregion
        
        #region Fields
        private UIColumn2Column mUIColumn2Column;
        
        private UIColumn0Column1 mUIColumn0Column;
        
        private WinTable mUIMainGridControlTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColumn2Column : WinControl
    {
        
        public UIColumn2Column(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 2";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinList UIGridControlList
        {
            get
            {
                if ((this.mUIGridControlList == null))
                {
                    this.mUIGridControlList = new WinList(this);
                    #region Search Criteria
                    this.mUIGridControlList.SearchProperties[WinList.PropertyNames.Name] = "row 0, column 2";
                    this.mUIGridControlList.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIGridControlList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIGridControlList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColumn0Column1 : WinControl
    {
        
        public UIColumn0Column1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 0";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinList UIGridControlList
        {
            get
            {
                if ((this.mUIGridControlList == null))
                {
                    this.mUIGridControlList = new WinList(this);
                    #region Search Criteria
                    this.mUIGridControlList.SearchProperties[WinList.PropertyNames.Name] = "row 0, column 0";
                    this.mUIGridControlList.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIGridControlList.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    this.mUIGridControlList.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIGridControlList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIGridControlList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow16 : WinWindow
    {
        
        public UIItemWindow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.COMBOBOX", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUIItemComboBox.SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
                    this.mUIItemComboBox.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIErroratDataFlowTaskMWindow : WinWindow
    {
        
        public UIErroratDataFlowTaskMWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "labelText";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinText UIErroratDataFlowTaskMText
        {
            get
            {
                if ((this.mUIErroratDataFlowTaskMText == null))
                {
                    this.mUIErroratDataFlowTaskMText = new WinText(this);
                    #region Search Criteria
                    this.mUIErroratDataFlowTaskMText.SearchProperties[WinText.PropertyNames.Name] = @"Error at Data Flow Task [Multiple Hash [24]]: System.Exception: Read write not supported.   at Martin.SQLServer.Dts.MultipleHash.SetUsageType(Int32 inputID, IDTSVirtualInput100 virtualInput, Int32 lineageID, DTSUsageType usageType)   at Microsoft.SqlServer.Dts.Pipeline.ManagedComponentHost.HostSetUsageType(IDTSManagedComponentWrapper100 wrapper, Int32 inputID, IDTSVirtualInput100 virtualInput, Int32 lineageID, DTSUsageType usageType)";
                    this.mUIErroratDataFlowTaskMText.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIErroratDataFlowTaskMText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIErroratDataFlowTaskMText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIAddColumnWindow : WinWindow
    {
        
        public UIAddColumnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addOutColButton";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddColumnButton
        {
            get
            {
                if ((this.mUIAddColumnButton == null))
                {
                    this.mUIAddColumnButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddColumnButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Column";
                    this.mUIAddColumnButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIAddColumnButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddColumnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIColumnWindow : WinWindow
    {
        
        public UIColumnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Column";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIRefreshWindow : WinWindow
    {
        
        public UIRefreshWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonRefresh";
            this.WindowTitles.Add("Advanced Editor for Multiple Hash");
            #endregion
        }
        
        #region Properties
        public WinButton UIRefreshButton
        {
            get
            {
                if ((this.mUIRefreshButton == null))
                {
                    this.mUIRefreshButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRefreshButton.SearchProperties[WinButton.PropertyNames.Name] = "Refresh";
                    this.mUIRefreshButton.WindowTitles.Add("Advanced Editor for Multiple Hash");
                    #endregion
                }
                return this.mUIRefreshButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRefreshButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWindowsFormsParkingWWindow : WinWindow
    {
        
        public UIWindowsFormsParkingWWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "WindowsFormsParkingWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WindowsFormsParkingWindow");
            #endregion
        }
        
        #region Properties
        public UINoneWindow UINoneWindow
        {
            get
            {
                if ((this.mUINoneWindow == null))
                {
                    this.mUINoneWindow = new UINoneWindow(this);
                }
                return this.mUINoneWindow;
            }
        }
        
        public UIBytestreamDT_BYTESWindow UIBytestreamDT_BYTESWindow
        {
            get
            {
                if ((this.mUIBytestreamDT_BYTESWindow == null))
                {
                    this.mUIBytestreamDT_BYTESWindow = new UIBytestreamDT_BYTESWindow(this);
                }
                return this.mUIBytestreamDT_BYTESWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINoneWindow mUINoneWindow;
        
        private UIBytestreamDT_BYTESWindow mUIBytestreamDT_BYTESWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINoneWindow : WinWindow
    {
        
        public UINoneWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "None";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.LISTBOX", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("WindowsFormsParkingWindow");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBytestreamDT_BYTESWindow : WinWindow
    {
        
        public UIBytestreamDT_BYTESWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "byte stream [DT_BYTES]";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.LISTBOX", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("WindowsFormsParkingWindow");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMicrosoftVisualStudiWindow : WinWindow
    {
        
        public UIMicrosoftVisualStudiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Visual Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIComponentMultipleHasWindow UIComponentMultipleHasWindow
        {
            get
            {
                if ((this.mUIComponentMultipleHasWindow == null))
                {
                    this.mUIComponentMultipleHasWindow = new UIComponentMultipleHasWindow(this);
                }
                return this.mUIComponentMultipleHasWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        
        private UIComponentMultipleHasWindow mUIComponentMultipleHasWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComponentMultipleHasWindow : WinWindow
    {
        
        public UIComponentMultipleHasWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMessage1";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WinText UIComponentMultipleHasText
        {
            get
            {
                if ((this.mUIComponentMultipleHasText == null))
                {
                    this.mUIComponentMultipleHasText = new WinText(this);
                    #region Search Criteria
                    this.mUIComponentMultipleHasText.SearchProperties[WinText.PropertyNames.Name] = "Component Multiple Hash does not allow adding outputs. (Microsoft.SqlServer.DTSPi" +
                        "pelineWrap)";
                    this.mUIComponentMultipleHasText.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIComponentMultipleHasText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIComponentMultipleHasText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPropertiesWindowWindow : WinWindow
    {
        
        public UIPropertiesWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Properties Window";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Properties Window");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIPropertyvalueisnotvaWindow UIPropertyvalueisnotvaWindow
        {
            get
            {
                if ((this.mUIPropertyvalueisnotvaWindow == null))
                {
                    this.mUIPropertyvalueisnotvaWindow = new UIPropertyvalueisnotvaWindow(this);
                }
                return this.mUIPropertyvalueisnotvaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        
        private UIPropertyvalueisnotvaWindow mUIPropertyvalueisnotvaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okBtn";
            this.WindowTitles.Add("Properties Window");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Properties Window");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIPropertyvalueisnotvaWindow : WinWindow
    {
        
        public UIPropertyvalueisnotvaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblMessage";
            this.WindowTitles.Add("Properties Window");
            #endregion
        }
        
        #region Properties
        public WinText UIPropertyvalueisnotvaText
        {
            get
            {
                if ((this.mUIPropertyvalueisnotvaText == null))
                {
                    this.mUIPropertyvalueisnotvaText = new WinText(this);
                    #region Search Criteria
                    this.mUIPropertyvalueisnotvaText.SearchProperties[WinText.PropertyNames.Name] = "Property value is not valid.";
                    this.mUIPropertyvalueisnotvaText.WindowTitles.Add("Properties Window");
                    #endregion
                }
                return this.mUIPropertyvalueisnotvaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIPropertyvalueisnotvaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMicrosoftVisualStudiWindow1 : WinWindow
    {
        
        public UIMicrosoftVisualStudiWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Visual Studio";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIDataFlowWindow : WinWindow
    {
        
        public UIDataFlowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Flow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Data Flow");
            #endregion
        }
        
        #region Properties
        public UIComboBox2Window UIComboBox2Window
        {
            get
            {
                if ((this.mUIComboBox2Window == null))
                {
                    this.mUIComboBox2Window = new UIComboBox2Window(this);
                }
                return this.mUIComboBox2Window;
            }
        }
        
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIComboBox2Window mUIComboBox2Window;
        
        private UIOKWindow4 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIComboBox2Window : WinWindow
    {
        
        public UIComboBox2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBox2";
            this.WindowTitles.Add("Data Flow");
            #endregion
        }
        
        #region Properties
        public WinComboBox UITOComboBox
        {
            get
            {
                if ((this.mUITOComboBox == null))
                {
                    this.mUITOComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUITOComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "To:";
                    this.mUITOComboBox.WindowTitles.Add("Data Flow");
                    #endregion
                }
                return this.mUITOComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUITOComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Data Flow");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Data Flow");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
